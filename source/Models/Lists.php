<?php

namespace Source\Models;

use Composer\Package\Loader\ValidatingArrayLoader;
use Source\Core\Model;
use Source\Models\MoldelInterfaces\FilterInterface;
use Source\Support\Filters\FiltersLists;

class Lists extends Model
{
    public function __construct()
    {
        parent::__construct('lists', ['id', 'created_at', 'updated_at'],
            ['id_hour', 'id_store', 'total_value', 'comission_value', 'net_value', 'date_moviment']);
    }

    public function bootstrap(
        int $idHour,
        int $idStore,
        string $totalValue,
        string $dateMoviment
    ): Lists {
        $this->id_hour = $idHour;
        $this->id_store = $idStore;
        $this->total_value = $totalValue;
        $this->date_moviment = $dateMoviment;
        return $this;
    }

    public function hour(): ?Hour
    {
        if ($this->id_hour) {
            return (new Hour())->findById($this->id_hour);
        }
        return null;
    }

    public function store(): ?Store
    {
        if ($this->id_store) {
            (new $this);
            return (new Store())->findById($this->id_store);
        }
        return null;
    }

    public function save(): bool
    {
        $this->comission_value = (($this->total_value * $this->store()->comissao) / 100);
        $this->net_value = $this->total_value - $this->comission_value;
        return parent::save(); // TODO: Change the autogenerated stub
    }

    public function findByStoreHour(?string $idStore, ?string $idHour, $dateMoviment, $object = true): ?object
    {
        if (!empty($idHour)) {
            $this->find("id_hour = :h AND id_store = :s AND DATE(date_moviment) = DATE('{$dateMoviment}')",
                "&h={$idHour}&s={$idStore}");
            if (empty($this->fetch())) {
                return null;
            }
        } else {
            return null;
        }
        if ($object) {
            return $this->fetch()->data();
        }
        return $this->fetch();
    }

    public function requiredList(?array $data): ?string
    {
        $fields = [];
        $fildsArray = [];
        foreach ($this->required as $field) {
            if (empty($data[$field])) {
                $fields[] = $field;
            }
        }
        if (!empty($fields)) {
            foreach ($fields as $value) {
                switch ($value) {
                    case 'id_hour':
                        $fildsArray[] = 'Horário';
                        break;
                    case 'id_store':
                        $fildsArray[] = 'Nome da Loja';
                        break;
                    case 'date_moviment':
                        $fildsArray[] = 'Data de movimento';
                        break;
                }
            }
            if (!empty($fildsArray)) {
            $message = 'Os seguintes campos são necessários: ' . implode(', ', $fildsArray) . ".";
            return $this->message->warning($message)->render();
            }
            return null;
        } else {
            return null;
        }
    }


}